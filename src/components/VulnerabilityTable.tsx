import {
  Box,
  Checkbox,
  Paper,
  Typography,
  TablePagination,
} from '@mui/material'
import { FixedSizeList, type ListChildComponentProps } from 'react-window'
import { useCallback, useEffect, useMemo, useState } from 'react'

interface Props {
  vulnerabilities: any[]
  onSelect?: (selected: any[]) => void
}

const ROW_HEIGHT = 50

const VulnerabilityTable = ({ vulnerabilities, onSelect }: Props) => {
  const [selectedRows, setSelectedRows] = useState<any[]>([])
  const [page, setPage] = useState(0)
  const [rowsPerPage, setRowsPerPage] = useState(10)
  const [sortBy, setSortBy] = useState<string | null>(null)
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc' | null>(null)

  const handleSort = (column: string) => {
    if (sortBy !== column) {
      setSortBy(column)
      setSortOrder('asc')
    } else if (sortOrder === 'asc') {
      setSortOrder('desc')
    } else {
      setSortBy(null)
      setSortOrder(null)
    }
  }

  const sortedRows = useMemo(() => {
    if (!sortBy || !sortOrder) return vulnerabilities

    return [...vulnerabilities].sort((a, b) => {
      const aVal = a[sortBy]
      const bVal = b[sortBy]

      if (aVal == null) return 1
      if (bVal == null) return -1

      if (sortBy === 'cvss') {
        return sortOrder === 'asc' ? aVal - bVal : bVal - aVal
      }

      if (sortBy === 'fixDate') {
        const aTime = new Date(aVal).getTime()
        const bTime = new Date(bVal).getTime()
        return sortOrder === 'asc' ? aTime - bTime : bTime - aTime
      }

      return sortOrder === 'asc'
        ? String(aVal).localeCompare(String(bVal))
        : String(bVal).localeCompare(String(aVal))
    })
  }, [vulnerabilities, sortBy, sortOrder])

  const pageData = useMemo(() => {
    return sortedRows.slice(
      page * rowsPerPage,
      page * rowsPerPage + rowsPerPage
    )
  }, [sortedRows, page, rowsPerPage])

  const toggleSelect = useCallback((row: any) => {
    setSelectedRows((prev) => {
      const exists = prev.find(
        (item) =>
          item.cve === row.cve &&
          item.packageVersion === row.packageVersion &&
          item.fixDate === row.fixDate
      )
      return exists
        ? prev.filter(
            (item) =>
              !(
                item.cve === row.cve &&
                item.packageVersion === row.packageVersion &&
                item.fixDate === row.fixDate
              )
          )
        : [...prev, row]
    })
  }, [])

  useEffect(() => {
    onSelect?.(selectedRows)
  }, [selectedRows, onSelect])

  const Row = ({ index, style }: ListChildComponentProps) => {
    const row = pageData[index]
    return (
      <Box
        style={style}
        display="flex"
        alignItems="center"
        borderBottom="1px solid #eee"
        px={2}
        height={ROW_HEIGHT}
      >
        <Box width="40px">
          <Checkbox
            checked={!!selectedRows.find(
              (item) =>
                item.cve === row.cve &&
                item.packageVersion === row.packageVersion &&
                item.fixDate === row.fixDate
            )}
            onChange={() => toggleSelect(row)}
          />
        </Box>
        <Box flex={1}>{row.cve}</Box>
        <Box width="100px">{row.severity}</Box>
        <Box width="60px">{row.cvss}</Box>
        <Box flex={1}>{row.packageName}</Box>
        <Box width="140px">{row.packageVersion}</Box>
        <Box width="150px">{row.fixDate}</Box>
      </Box>
    )
  }

  const renderSortableHeader = (label: string, column: string, width: number | string = 'auto', flex?: boolean) => {
    return (
      <Box
        width={width}
        flex={flex ? 1 : undefined}
        sx={{
          cursor: 'pointer',
          display: 'flex',
          alignItems: 'center',
          gap: '4px',
          '&:hover': { backgroundColor: '#f0f0f0' },
        }}
        onClick={() => handleSort(column)}
      >
        <Typography variant="subtitle2">
          {label}
        </Typography>
        {sortBy === column ? (
          <Typography variant="subtitle2">
            {sortOrder === 'asc' ? '↑' : '↓'}
          </Typography>
        ) : (
          <Typography variant="body2" sx={{ opacity: 0.5 }}>⇅</Typography>
        )}
      </Box>
    )
  }

  return (
    <Paper sx={{ mt: 2 }}>
      {/* Header row */}
      <Box display="flex" alignItems="center" px={2} py={1} bgcolor="#f5f5f5">
        <Box width="40px" />
        {renderSortableHeader('CVE', 'cve', undefined, true)}
        {renderSortableHeader('Severity', 'severity', 100)}
        {renderSortableHeader('CVSS', 'cvss', 60)}
        <Box flex={1}>
          <Typography variant="subtitle2">Package</Typography>
        </Box>
        <Box width="140px">
          <Typography variant="subtitle2">Version</Typography>
        </Box>
        {renderSortableHeader('Fix Date', 'fixDate', 150)}
      </Box>

      {/* Virtualized list */}
      <FixedSizeList
        height={Math.min(500, ROW_HEIGHT * rowsPerPage)}
        itemCount={pageData.length}
        itemSize={ROW_HEIGHT}
        width="100%"
      >
        {Row}
      </FixedSizeList>

      {/* Pagination */}
      <TablePagination
        component="div"
        count={vulnerabilities.length}
        page={page}
        onPageChange={(_, newPage) => setPage(newPage)}
        rowsPerPage={rowsPerPage}
        onRowsPerPageChange={(e) => {
          setRowsPerPage(parseInt(e.target.value, 10))
          setPage(0)
        }}
        rowsPerPageOptions={[10, 25, 50, 100]}
      />
    </Paper>
  )
}

export default VulnerabilityTable
